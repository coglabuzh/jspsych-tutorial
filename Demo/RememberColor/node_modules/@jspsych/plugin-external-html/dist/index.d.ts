import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from "jspsych";
declare const info: {
    readonly name: "external-html";
    readonly parameters: {
        /** The url of the external html page */
        readonly url: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "URL";
            readonly default: any;
        };
        /** The key to continue to the next page. */
        readonly cont_key: {
            readonly type: ParameterType.KEY;
            readonly pretty_name: "Continue key";
            readonly default: any;
        };
        /** The button to continue to the next page. */
        readonly cont_btn: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Continue button";
            readonly default: any;
        };
        /** Function to check whether user is allowed to continue after clicking cont_key or clicking cont_btn */
        readonly check_fn: {
            readonly type: ParameterType.FUNCTION;
            readonly pretty_name: "Check function";
            readonly default: () => boolean;
        };
        /** Whether or not to force a page refresh. */
        readonly force_refresh: {
            readonly type: ParameterType.BOOL;
            readonly pretty_name: "Force refresh";
            readonly default: false;
        };
        /** If execute_Script == true, then all JavasScript code on the external page will be executed. */
        readonly execute_script: {
            readonly type: ParameterType.BOOL;
            readonly pretty_name: "Execute scripts";
            readonly default: false;
        };
    };
};
declare type Info = typeof info;
/**
 * **external-html**
 *
 * jsPsych plugin to load and display an external html page. To proceed to the next trial, the
 * user might either press a button on the page or a specific key. Afterwards, the page will be hidden and
 * the experiment will continue.
 *
 * @author Erik Weitnauer
 * @see {@link https://www.jspsych.org/plugins/jspsych-external-html/ external-html plugin documentation on jspsych.org}
 */
declare class ExternalHtmlPlugin implements JsPsychPlugin<Info> {
    private jsPsych;
    static info: {
        readonly name: "external-html";
        readonly parameters: {
            /** The url of the external html page */
            readonly url: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "URL";
                readonly default: any;
            };
            /** The key to continue to the next page. */
            readonly cont_key: {
                readonly type: ParameterType.KEY;
                readonly pretty_name: "Continue key";
                readonly default: any;
            };
            /** The button to continue to the next page. */
            readonly cont_btn: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Continue button";
                readonly default: any;
            };
            /** Function to check whether user is allowed to continue after clicking cont_key or clicking cont_btn */
            readonly check_fn: {
                readonly type: ParameterType.FUNCTION;
                readonly pretty_name: "Check function";
                readonly default: () => boolean;
            };
            /** Whether or not to force a page refresh. */
            readonly force_refresh: {
                readonly type: ParameterType.BOOL;
                readonly pretty_name: "Force refresh";
                readonly default: false;
            };
            /** If execute_Script == true, then all JavasScript code on the external page will be executed. */
            readonly execute_script: {
                readonly type: ParameterType.BOOL;
                readonly pretty_name: "Execute scripts";
                readonly default: false;
            };
        };
    };
    constructor(jsPsych: JsPsych);
    trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void): Promise<unknown>;
    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;
    private create_simulation_data;
    private simulate_data_only;
    private simulate_visual;
}
export default ExternalHtmlPlugin;
