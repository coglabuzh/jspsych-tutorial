{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"external-html\",\n  parameters: {\n    /** The url of the external html page */\n    url: {\n      type: ParameterType.STRING,\n      pretty_name: \"URL\",\n      default: undefined,\n    },\n    /** The key to continue to the next page. */\n    cont_key: {\n      type: ParameterType.KEY,\n      pretty_name: \"Continue key\",\n      default: null,\n    },\n    /** The button to continue to the next page. */\n    cont_btn: {\n      type: ParameterType.STRING,\n      pretty_name: \"Continue button\",\n      default: null,\n    },\n    /** Function to check whether user is allowed to continue after clicking cont_key or clicking cont_btn */\n    check_fn: {\n      type: ParameterType.FUNCTION,\n      pretty_name: \"Check function\",\n      default: () => true,\n    },\n    /** Whether or not to force a page refresh. */\n    force_refresh: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Force refresh\",\n      default: false,\n    },\n    /** If execute_Script == true, then all JavasScript code on the external page will be executed. */\n    execute_script: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Execute scripts\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **external-html**\n *\n * jsPsych plugin to load and display an external html page. To proceed to the next trial, the\n * user might either press a button on the page or a specific key. Afterwards, the page will be hidden and\n * the experiment will continue.\n *\n * @author Erik Weitnauer\n * @see {@link https://www.jspsych.org/plugins/jspsych-external-html/ external-html plugin documentation on jspsych.org}\n */\nclass ExternalHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    var url = trial.url;\n    if (trial.force_refresh) {\n      url = trial.url + \"?t=\" + performance.now();\n    }\n\n    fetch(url)\n      .then((response) => {\n        return response.text();\n      })\n      .then((html) => {\n        display_element.innerHTML = html;\n        on_load();\n        var t0 = performance.now();\n\n        const key_listener = (e) => {\n          if (this.jsPsych.pluginAPI.compareKeys(e.key, trial.cont_key)) {\n            finish();\n          }\n        };\n\n        const finish = () => {\n          if (trial.check_fn && !trial.check_fn(display_element)) {\n            return;\n          }\n          if (trial.cont_key) {\n            display_element.removeEventListener(\"keydown\", key_listener);\n          }\n          var trial_data = {\n            rt: Math.round(performance.now() - t0),\n            url: trial.url,\n          };\n          display_element.innerHTML = \"\";\n          this.jsPsych.finishTrial(trial_data);\n          trial_complete();\n        };\n\n        // by default, scripts on the external page are not executed with XMLHttpRequest().\n        // To activate their content through DOM manipulation, we need to relocate all script tags\n        if (trial.execute_script) {\n          // changed for..of getElementsByTagName(\"script\") here to for i loop due to TS error:\n          // Type 'HTMLCollectionOf<HTMLScriptElement>' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)\n          var all_scripts = display_element.getElementsByTagName(\"script\");\n          for (var i = 0; i < all_scripts.length; i++) {\n            const relocatedScript = document.createElement(\"script\");\n            const curr_script = all_scripts[i];\n            relocatedScript.text = curr_script.text;\n            curr_script.parentNode.replaceChild(relocatedScript, curr_script);\n          }\n        }\n\n        if (trial.cont_btn) {\n          display_element.querySelector(\"#\" + trial.cont_btn).addEventListener(\"click\", finish);\n        }\n\n        if (trial.cont_key) {\n          display_element.addEventListener(\"keydown\", key_listener);\n        }\n      })\n      .catch((err) => {\n        console.error(`Something went wrong with fetch() in plugin-external-html.`, err);\n      });\n\n    // helper to load via XMLHttpRequest\n    /*const load = (element, file, callback) => {\n      var xmlhttp = new XMLHttpRequest();\n      xmlhttp.open(\"GET\", file, true);\n      xmlhttp.onload = () => {\n        console.log(`loaded ${xmlhttp.status}`)\n        if (xmlhttp.status == 200 || xmlhttp.status == 0) {\n          //Check if loaded\n          element.innerHTML = xmlhttp.responseText;\n          console.log(`made it ${xmlhttp.responseText}`);\n          callback();\n        }\n      };\n      xmlhttp.send();\n    };\n\n    load(display_element, url, () => {\n      \n    });\n*/\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      url: trial.url,\n      rt: this.jsPsych.randomization.sampleExGaussian(2000, 200, 1 / 200, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (trial.cont_key) {\n        this.jsPsych.pluginAPI.pressKey(trial.cont_key, data.rt);\n      } else if (trial.cont_btn) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#\" + trial.cont_btn),\n          data.rt\n        );\n      }\n    });\n  }\n}\n\nexport default ExternalHtmlPlugin;\n"],"names":["info","name","parameters","url","type","ParameterType","STRING","pretty_name","default","undefined","cont_key","KEY","cont_btn","check_fn","FUNCTION","force_refresh","BOOL","execute_script","ExternalHtmlPlugin","jsPsych","_classCallCheck","this","value","display_element","trial","on_load","trial_complete","_this","performance","now","fetch","then","response","text","html","innerHTML","t0","key_listener","e","pluginAPI","compareKeys","key","finish","removeEventListener","trial_data","rt","Math","round","finishTrial","all_scripts","getElementsByTagName","i","length","relocatedScript","document","createElement","curr_script","parentNode","replaceChild","querySelector","addEventListener","err","console","error","Promise","resolve","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","sampleExGaussian","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","_this2","getDisplayElement","pressKey","clickTarget"],"mappings":"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"}