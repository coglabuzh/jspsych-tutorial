{"version":3,"sources":["../node_modules/path-type/index.js","../node_modules/dir-glob/index.js","../node_modules/ignore/index.js","../node_modules/globby/node_modules/slash/index.js","../node_modules/globby/utilities.js","../node_modules/globby/ignore.js","../node_modules/globby/index.js"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\n\nasync function isType(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\tconst stats = await promisify(fs[fsStatType])(filePath);\n\t\treturn stats[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nfunction isTypeSync(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\treturn fs[fsStatType](filePath)[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexports.isFile = isType.bind(null, 'stat', 'isFile');\nexports.isDirectory = isType.bind(null, 'stat', 'isDirectory');\nexports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');\nexports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');\nexports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');\nexports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');\n","'use strict';\nconst path = require('path');\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n\tconst pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n\treturn path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n\tif (options.files && !Array.isArray(options.files)) {\n\t\tthrow new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n\t}\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\tthrow new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n\t}\n\n\tif (options.files && options.extensions) {\n\t\treturn options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n\t}\n\n\tif (options.files) {\n\t\treturn options.files.map(x => path.posix.join(directory, `**/${x}`));\n\t}\n\n\tif (options.extensions) {\n\t\treturn [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n\t}\n\n\treturn [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = await Promise.all([].concat(input).map(async x => {\n\t\tconst isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n\t\treturn isDirectory ? getGlob(x, options) : x;\n\t}));\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n","// A simple implementation of make-array\nfunction makeArray (subject) {\n  return Array.isArray(subject)\n    ? subject\n    : [subject]\n}\n\nconst EMPTY = ''\nconst SPACE = ' '\nconst ESCAPE = '\\\\'\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g\n// /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/\n\nconst SLASH = '/'\nconst KEY_IGNORE = typeof Symbol !== 'undefined'\n  ? Symbol.for('node-ignore')\n  /* istanbul ignore next */\n  : 'node-ignore'\n\nconst define = (object, key, value) =>\n  Object.defineProperty(object, key, {value})\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g\n\nconst RETURN_FALSE = () => false\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = range => range.replace(\n  REGEX_REGEXP_RANGE,\n  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)\n    ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : EMPTY\n)\n\n// See fixtures #59\nconst cleanRangeBackSlash = slashes => {\n  const {length} = slashes\n  return slashes.slice(0, length - length % 2)\n}\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nconst REPLACERS = [\n\n  // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n  [\n    // (a\\ ) -> (a )\n    // (a  ) -> (a)\n    // (a \\ ) -> (a  )\n    /\\\\?\\s+$/,\n    match => match.indexOf('\\\\') === 0\n      ? SPACE\n      : EMPTY\n  ],\n\n  // replace (\\ ) with ' '\n  [\n    /\\\\\\s/g,\n    () => SPACE\n  ],\n\n  // Escape metacharacters\n  // which is written down by users but means special for regular expressions.\n\n  // > There are 12 characters with special meanings:\n  // > - the backslash \\,\n  // > - the caret ^,\n  // > - the dollar sign $,\n  // > - the period or dot .,\n  // > - the vertical bar or pipe symbol |,\n  // > - the question mark ?,\n  // > - the asterisk or star *,\n  // > - the plus sign +,\n  // > - the opening parenthesis (,\n  // > - the closing parenthesis ),\n  // > - and the opening square bracket [,\n  // > - the opening curly brace {,\n  // > These special characters are often called \"metacharacters\".\n  [\n    /[\\\\$.|*+(){^]/g,\n    match => `\\\\${match}`\n  ],\n\n  [\n    // > a question mark (?) matches a single character\n    /(?!\\\\)\\?/g,\n    () => '[^/]'\n  ],\n\n  // leading slash\n  [\n\n    // > A leading slash matches the beginning of the pathname.\n    // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n    // A leading slash matches the beginning of the pathname\n    /^\\//,\n    () => '^'\n  ],\n\n  // replace special metacharacter slash after the leading slash\n  [\n    /\\//g,\n    () => '\\\\/'\n  ],\n\n  [\n    // > A leading \"**\" followed by a slash means match in all directories.\n    // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n    // > the same as pattern \"foo\".\n    // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n    // >   under directory \"foo\".\n    // Notice that the '*'s have been replaced as '\\\\*'\n    /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n    // '**/foo' <-> 'foo'\n    () => '^(?:.*\\\\/)?'\n  ],\n\n  // starting\n  [\n    // there will be no leading '/'\n    //   (which has been replaced by section \"leading slash\")\n    // If starts with '**', adding a '^' to the regular expression also works\n    /^(?=[^^])/,\n    function startingReplacer () {\n      // If has a slash `/` at the beginning or middle\n      return !/\\/(?!$)/.test(this)\n        // > Prior to 2.22.1\n        // > If the pattern does not contain a slash /,\n        // >   Git treats it as a shell glob pattern\n        // Actually, if there is only a trailing slash,\n        //   git also treats it as a shell glob pattern\n\n        // After 2.22.1 (compatible but clearer)\n        // > If there is a separator at the beginning or middle (or both)\n        // > of the pattern, then the pattern is relative to the directory\n        // > level of the particular .gitignore file itself.\n        // > Otherwise the pattern may also match at any level below\n        // > the .gitignore level.\n        ? '(?:^|\\\\/)'\n\n        // > Otherwise, Git treats the pattern as a shell glob suitable for\n        // >   consumption by fnmatch(3)\n        : '^'\n    }\n  ],\n\n  // two globstars\n  [\n    // Use lookahead assertions so that we could match more than one `'/**'`\n    /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n    // Zero, one or several directories\n    // should not use '*', or it will be replaced by the next replacer\n\n    // Check if it is not the last `'/**'`\n    (_, index, str) => index + 6 < str.length\n\n      // case: /**/\n      // > A slash followed by two consecutive asterisks then a slash matches\n      // >   zero or more directories.\n      // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n      // '/**/'\n      ? '(?:\\\\/[^\\\\/]+)*'\n\n      // case: /**\n      // > A trailing `\"/**\"` matches everything inside.\n\n      // #21: everything inside but it should not include the current folder\n      : '\\\\/.+'\n  ],\n\n  // intermediate wildcards\n  [\n    // Never replace escaped '*'\n    // ignore rule '\\*' will match the path '*'\n\n    // 'abc.*/' -> go\n    // 'abc.*'  -> skip this rule\n    /(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n    // '*.js' matches '.js'\n    // '*.js' doesn't match 'abc'\n    (_, p1) => `${p1}[^\\\\/]*`\n  ],\n\n  [\n    // unescape, revert step 3 except for back slash\n    // For example, if a user escape a '\\\\*',\n    // after step 3, the result will be '\\\\\\\\\\\\*'\n    /\\\\\\\\\\\\(?=[$.|*+(){^])/g,\n    () => ESCAPE\n  ],\n\n  [\n    // '\\\\\\\\' -> '\\\\'\n    /\\\\\\\\/g,\n    () => ESCAPE\n  ],\n\n  [\n    // > The range notation, e.g. [a-zA-Z],\n    // > can be used to match one of the characters in a range.\n\n    // `\\` is escaped by step 3\n    /(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g,\n    (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE\n      // '\\\\[bar]' -> '\\\\\\\\[bar\\\\]'\n      ? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}`\n      : close === ']'\n        ? endEscape.length % 2 === 0\n          // A normal case, and it is a range notation\n          // '[bar]'\n          // '[bar\\\\\\\\]'\n          ? `[${sanitizeRange(range)}${endEscape}]`\n          // Invalid range notaton\n          // '[bar\\\\]' -> '[bar\\\\\\\\]'\n          : '[]'\n        : '[]'\n  ],\n\n  // ending\n  [\n    // 'js' will not match 'js.'\n    // 'ab' will not match 'abc'\n    /(?:[^*])$/,\n\n    // WTF!\n    // https://git-scm.com/docs/gitignore\n    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n    // which re-fixes #24, #38\n\n    // > If there is a separator at the end of the pattern then the pattern\n    // > will only match directories, otherwise the pattern can match both\n    // > files and directories.\n\n    // 'js*' will not match 'a.js'\n    // 'js/' will not match 'a.js'\n    // 'js' will match 'a.js' and 'a.js/'\n    match => /\\/$/.test(match)\n      // foo/ will not match 'foo'\n      ? `${match}$`\n      // foo matches 'foo' and 'foo/'\n      : `${match}(?=$|\\\\/$)`\n  ],\n\n  // trailing wildcard\n  [\n    /(\\^|\\\\\\/)?\\\\\\*$/,\n    (_, p1) => {\n      const prefix = p1\n        // '\\^':\n        // '/*' does not match EMPTY\n        // '/*' does not match everything\n\n        // '\\\\\\/':\n        // 'abc/*' does not match 'abc/'\n        ? `${p1}[^/]+`\n\n        // 'a*' matches 'a'\n        // 'a*' matches 'aa'\n        : '[^/]*'\n\n      return `${prefix}(?=$|\\\\/$)`\n    }\n  ],\n]\n\n// A simple cache, because an ignore rule only has only one certain meaning\nconst regexCache = Object.create(null)\n\n// @param {pattern}\nconst makeRegex = (pattern, ignoreCase) => {\n  let source = regexCache[pattern]\n\n  if (!source) {\n    source = REPLACERS.reduce(\n      (prev, current) => prev.replace(current[0], current[1].bind(pattern)),\n      pattern\n    )\n    regexCache[pattern] = source\n  }\n\n  return ignoreCase\n    ? new RegExp(source, 'i')\n    : new RegExp(source)\n}\n\nconst isString = subject => typeof subject === 'string'\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = pattern => pattern\n  && isString(pattern)\n  && !REGEX_TEST_BLANK_LINE.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0\n\nconst splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF)\n\nclass IgnoreRule {\n  constructor (\n    origin,\n    pattern,\n    negative,\n    regex\n  ) {\n    this.origin = origin\n    this.pattern = pattern\n    this.negative = negative\n    this.regex = regex\n  }\n}\n\nconst createRule = (pattern, ignoreCase) => {\n  const origin = pattern\n  let negative = false\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true\n    pattern = pattern.substr(1)\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#')\n\n  const regex = makeRegex(pattern, ignoreCase)\n\n  return new IgnoreRule(\n    origin,\n    pattern,\n    negative,\n    regex\n  )\n}\n\nconst throwError = (message, Ctor) => {\n  throw new Ctor(message)\n}\n\nconst checkPath = (path, originalPath, doThrow) => {\n  if (!isString(path)) {\n    return doThrow(\n      `path must be a string, but got \\`${originalPath}\\``,\n      TypeError\n    )\n  }\n\n  // We don't know if we should ignore EMPTY, so throw\n  if (!path) {\n    return doThrow(`path must not be empty`, TypeError)\n  }\n\n  // Check if it is a relative path\n  if (checkPath.isNotRelative(path)) {\n    const r = '`path.relative()`d'\n    return doThrow(\n      `path should be a ${r} string, but got \"${originalPath}\"`,\n      RangeError\n    )\n  }\n\n  return true\n}\n\nconst isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path)\n\ncheckPath.isNotRelative = isNotRelative\ncheckPath.convert = p => p\n\nclass Ignore {\n  constructor ({\n    ignorecase = true,\n    ignoreCase = ignorecase,\n    allowRelativePaths = false\n  } = {}) {\n    define(this, KEY_IGNORE, true)\n\n    this._rules = []\n    this._ignoreCase = ignoreCase\n    this._allowRelativePaths = allowRelativePaths\n    this._initCache()\n  }\n\n  _initCache () {\n    this._ignoreCache = Object.create(null)\n    this._testCache = Object.create(null)\n  }\n\n  _addPattern (pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules)\n      this._added = true\n      return\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignoreCase)\n      this._added = true\n      this._rules.push(rule)\n    }\n  }\n\n  // @param {Array<string> | string | Ignore} pattern\n  add (pattern) {\n    this._added = false\n\n    makeArray(\n      isString(pattern)\n        ? splitPattern(pattern)\n        : pattern\n    ).forEach(this._addPattern, this)\n\n    // Some rules have just added to the ignore,\n    // making the behavior changed.\n    if (this._added) {\n      this._initCache()\n    }\n\n    return this\n  }\n\n  // legacy\n  addPattern (pattern) {\n    return this.add(pattern)\n  }\n\n  //          |           ignored : unignored\n  // negative |   0:0   |   0:1   |   1:0   |   1:1\n  // -------- | ------- | ------- | ------- | --------\n  //     0    |  TEST   |  TEST   |  SKIP   |    X\n  //     1    |  TESTIF |  SKIP   |  TEST   |    X\n\n  // - SKIP: always skip\n  // - TEST: always test\n  // - TESTIF: only test if checkUnignored\n  // - X: that never happen\n\n  // @param {boolean} whether should check if the path is unignored,\n  //   setting `checkUnignored` to `false` could reduce additional\n  //   path matching.\n\n  // @returns {TestResult} true if a file is ignored\n  _testOne (path, checkUnignored) {\n    let ignored = false\n    let unignored = false\n\n    this._rules.forEach(rule => {\n      const {negative} = rule\n      if (\n        unignored === negative && ignored !== unignored\n        || negative && !ignored && !unignored && !checkUnignored\n      ) {\n        return\n      }\n\n      const matched = rule.regex.test(path)\n\n      if (matched) {\n        ignored = !negative\n        unignored = negative\n      }\n    })\n\n    return {\n      ignored,\n      unignored\n    }\n  }\n\n  // @returns {TestResult}\n  _test (originalPath, cache, checkUnignored, slices) {\n    const path = originalPath\n      // Supports nullable path\n      && checkPath.convert(originalPath)\n\n    checkPath(\n      path,\n      originalPath,\n      this._allowRelativePaths\n        ? RETURN_FALSE\n        : throwError\n    )\n\n    return this._t(path, cache, checkUnignored, slices)\n  }\n\n  _t (path, cache, checkUnignored, slices) {\n    if (path in cache) {\n      return cache[path]\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH)\n    }\n\n    slices.pop()\n\n    // If the path has no parent directory, just test it\n    if (!slices.length) {\n      return cache[path] = this._testOne(path, checkUnignored)\n    }\n\n    const parent = this._t(\n      slices.join(SLASH) + SLASH,\n      cache,\n      checkUnignored,\n      slices\n    )\n\n    // If the path contains a parent directory, check the parent first\n    return cache[path] = parent.ignored\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      ? parent\n      : this._testOne(path, checkUnignored)\n  }\n\n  ignores (path) {\n    return this._test(path, this._ignoreCache, false).ignored\n  }\n\n  createFilter () {\n    return path => !this.ignores(path)\n  }\n\n  filter (paths) {\n    return makeArray(paths).filter(this.createFilter())\n  }\n\n  // @returns {TestResult}\n  test (path) {\n    return this._test(path, this._testCache, true)\n  }\n}\n\nconst factory = options => new Ignore(options)\n\nconst isPathValid = path =>\n  checkPath(path && checkPath.convert(path), path, RETURN_FALSE)\n\nfactory.isPathValid = isPathValid\n\n// Fixes typescript\nfactory.default = factory\n\nmodule.exports = factory\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\nif (\n  // Detect `process` so that it can run in browsers.\n  typeof process !== 'undefined'\n  && (\n    process.env && process.env.IGNORE_TEST_WIN32\n    || process.platform === 'win32'\n  )\n) {\n  /* eslint no-control-regex: \"off\" */\n  const makePosix = str => /^\\\\\\\\\\?\\\\/.test(str)\n  || /[\"<>|\\u0000-\\u001F]+/u.test(str)\n    ? str\n    : str.replace(/\\\\/g, '/')\n\n  checkPath.convert = makePosix\n\n  // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n  // 'd:\\\\foo'\n  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i\n  checkPath.isNotRelative = path =>\n    REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)\n    || isNotRelative(path)\n}\n","export default function slash(path) {\n\tconst isExtendedLengthPath = /^\\\\\\\\\\?\\\\/.test(path);\n\tconst hasNonAscii = /[^\\u0000-\\u0080]+/.test(path); // eslint-disable-line no-control-regex\n\n\tif (isExtendedLengthPath || hasNonAscii) {\n\t\treturn path;\n\t}\n\n\treturn path.replace(/\\\\/g, '/');\n}\n","import {fileURLToPath} from 'node:url';\nimport {Transform} from 'node:stream';\n\nexport const toPath = urlOrPath => urlOrPath instanceof URL ? fileURLToPath(urlOrPath) : urlOrPath;\n\nexport class FilterStream extends Transform {\n\tconstructor(filter) {\n\t\tsuper({\n\t\t\tobjectMode: true,\n\t\t\ttransform(data, encoding, callback) {\n\t\t\t\tcallback(undefined, filter(data) ? data : undefined);\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport const isNegativePattern = pattern => pattern[0] === '!';\n","import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport {toPath, isNegativePattern} from './utilities.js';\n\nconst ignoreFilesGlobOptions = {\n\tignore: [\n\t\t'**/node_modules',\n\t\t'**/flow-typed',\n\t\t'**/coverage',\n\t\t'**/.git',\n\t],\n\tabsolute: true,\n\tdot: true,\n};\n\nexport const GITIGNORE_FILES_PATTERN = '**/.gitignore';\n\nconst applyBaseToPattern = (pattern, base) => isNegativePattern(pattern)\n\t? '!' + path.posix.join(base, pattern.slice(1))\n\t: path.posix.join(base, pattern);\n\nconst parseIgnoreFile = (file, cwd) => {\n\tconst base = slash(path.relative(cwd, path.dirname(file.filePath)));\n\n\treturn file.content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(line => line && !line.startsWith('#'))\n\t\t.map(pattern => applyBaseToPattern(pattern, base));\n};\n\nconst toRelativePath = (fileOrDirectory, cwd) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(fileOrDirectory)) {\n\t\tif (slash(fileOrDirectory).startsWith(cwd)) {\n\t\t\treturn path.relative(cwd, fileOrDirectory);\n\t\t}\n\n\t\tthrow new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);\n\t}\n\n\treturn fileOrDirectory;\n};\n\nconst getIsIgnoredPredicate = (files, cwd) => {\n\tconst patterns = files.flatMap(file => parseIgnoreFile(file, cwd));\n\tconst ignores = gitIgnore().add(patterns);\n\n\treturn fileOrDirectory => {\n\t\tfileOrDirectory = toPath(fileOrDirectory);\n\t\tfileOrDirectory = toRelativePath(fileOrDirectory, cwd);\n\t\treturn ignores.ignores(slash(fileOrDirectory));\n\t};\n};\n\nconst normalizeOptions = (options = {}) => ({\n\tcwd: toPath(options.cwd) || process.cwd(),\n});\n\nexport const isIgnoredByIgnoreFiles = async (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = await fastGlob(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = await Promise.all(\n\t\tpaths.map(async filePath => ({\n\t\t\tfilePath,\n\t\t\tcontent: await fs.promises.readFile(filePath, 'utf8'),\n\t\t})),\n\t);\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isIgnoredByIgnoreFilesSync = (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = paths.map(filePath => ({\n\t\tfilePath,\n\t\tcontent: fs.readFileSync(filePath, 'utf8'),\n\t}));\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isGitIgnored = options => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options);\nexport const isGitIgnoredSync = options => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options);\n","import fs from 'node:fs';\nimport nodePath from 'node:path';\nimport merge2 from 'merge2';\nimport fastGlob from 'fast-glob';\nimport dirGlob from 'dir-glob';\nimport {\n\tGITIGNORE_FILES_PATTERN,\n\tisIgnoredByIgnoreFiles,\n\tisIgnoredByIgnoreFilesSync,\n} from './ignore.js';\nimport {FilterStream, toPath, isNegativePattern} from './utilities.js';\n\nconst assertPatternsInput = patterns => {\n\tif (patterns.some(pattern => typeof pattern !== 'string')) {\n\t\tthrow new TypeError('Patterns must be a string or an array of strings');\n\t}\n};\n\nconst toPatternsArray = patterns => {\n\tpatterns = [...new Set([patterns].flat())];\n\tassertPatternsInput(patterns);\n\treturn patterns;\n};\n\nconst checkCwdOption = options => {\n\tif (!options.cwd) {\n\t\treturn;\n\t}\n\n\tlet stat;\n\ttry {\n\t\tstat = fs.statSync(options.cwd);\n\t} catch {\n\t\treturn;\n\t}\n\n\tif (!stat.isDirectory()) {\n\t\tthrow new Error('The `cwd` option must be a path to a directory');\n\t}\n};\n\nconst normalizeOptions = (options = {}) => {\n\toptions = {\n\t\tignore: [],\n\t\texpandDirectories: true,\n\t\t...options,\n\t\tcwd: toPath(options.cwd),\n\t};\n\n\tcheckCwdOption(options);\n\n\treturn options;\n};\n\nconst normalizeArguments = fn => async (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions(options));\nconst normalizeArgumentsSync = fn => (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions(options));\n\nconst getIgnoreFilesPatterns = options => {\n\tconst {ignoreFiles, gitignore} = options;\n\n\tconst patterns = ignoreFiles ? toPatternsArray(ignoreFiles) : [];\n\tif (gitignore) {\n\t\tpatterns.push(GITIGNORE_FILES_PATTERN);\n\t}\n\n\treturn patterns;\n};\n\nconst getFilter = async options => {\n\tconst ignoreFilesPatterns = getIgnoreFilesPatterns(options);\n\treturn createFilterFunction(\n\t\tignoreFilesPatterns.length > 0 && await isIgnoredByIgnoreFiles(ignoreFilesPatterns, {cwd: options.cwd}),\n\t);\n};\n\nconst getFilterSync = options => {\n\tconst ignoreFilesPatterns = getIgnoreFilesPatterns(options);\n\treturn createFilterFunction(\n\t\tignoreFilesPatterns.length > 0 && isIgnoredByIgnoreFilesSync(ignoreFilesPatterns, {cwd: options.cwd}),\n\t);\n};\n\nconst createFilterFunction = isIgnored => {\n\tconst seen = new Set();\n\n\treturn fastGlobResult => {\n\t\tconst path = fastGlobResult.path || fastGlobResult;\n\t\tconst pathKey = nodePath.normalize(path);\n\t\tconst seenOrIgnored = seen.has(pathKey) || (isIgnored && isIgnored(path));\n\t\tseen.add(pathKey);\n\t\treturn !seenOrIgnored;\n\t};\n};\n\nconst unionFastGlobResults = (results, filter) => results.flat().filter(fastGlobResult => filter(fastGlobResult));\nconst unionFastGlobStreams = (streams, filter) => merge2(streams).pipe(new FilterStream(fastGlobResult => filter(fastGlobResult)));\n\nconst convertNegativePatterns = (patterns, options) => {\n\tconst tasks = [];\n\n\twhile (patterns.length > 0) {\n\t\tconst index = patterns.findIndex(pattern => isNegativePattern(pattern));\n\n\t\tif (index === -1) {\n\t\t\ttasks.push({patterns, options});\n\t\t\tbreak;\n\t\t}\n\n\t\tconst ignorePattern = patterns[index].slice(1);\n\n\t\tfor (const task of tasks) {\n\t\t\ttask.options.ignore.push(ignorePattern);\n\t\t}\n\n\t\tif (index !== 0) {\n\t\t\ttasks.push({\n\t\t\t\tpatterns: patterns.slice(0, index),\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t...options.ignore,\n\t\t\t\t\t\tignorePattern,\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tpatterns = patterns.slice(index + 1);\n\t}\n\n\treturn tasks;\n};\n\nconst getDirGlobOptions = (options, cwd) => ({\n\t...(cwd ? {cwd} : {}),\n\t...(Array.isArray(options) ? {files: options} : options),\n});\n\nconst generateTasks = async (patterns, options) => {\n\tconst globTasks = convertNegativePatterns(patterns, options);\n\n\tconst {cwd, expandDirectories} = options;\n\n\tif (!expandDirectories) {\n\t\treturn globTasks;\n\t}\n\n\tconst patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);\n\tconst ignoreExpandOptions = cwd ? {cwd} : undefined;\n\n\treturn Promise.all(\n\t\tglobTasks.map(async task => {\n\t\t\tlet {patterns, options} = task;\n\n\t\t\t[\n\t\t\t\tpatterns,\n\t\t\t\toptions.ignore,\n\t\t\t] = await Promise.all([\n\t\t\t\tdirGlob(patterns, patternExpandOptions),\n\t\t\t\tdirGlob(options.ignore, ignoreExpandOptions),\n\t\t\t]);\n\n\t\t\treturn {patterns, options};\n\t\t}),\n\t);\n};\n\nconst generateTasksSync = (patterns, options) => {\n\tconst globTasks = convertNegativePatterns(patterns, options);\n\n\tconst {cwd, expandDirectories} = options;\n\n\tif (!expandDirectories) {\n\t\treturn globTasks;\n\t}\n\n\tconst patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);\n\tconst ignoreExpandOptions = cwd ? {cwd} : undefined;\n\n\treturn globTasks.map(task => {\n\t\tlet {patterns, options} = task;\n\t\tpatterns = dirGlob.sync(patterns, patternExpandOptions);\n\t\toptions.ignore = dirGlob.sync(options.ignore, ignoreExpandOptions);\n\t\treturn {patterns, options};\n\t});\n};\n\nexport const globby = normalizeArguments(async (patterns, options) => {\n\tconst [\n\t\ttasks,\n\t\tfilter,\n\t] = await Promise.all([\n\t\tgenerateTasks(patterns, options),\n\t\tgetFilter(options),\n\t]);\n\tconst results = await Promise.all(tasks.map(task => fastGlob(task.patterns, task.options)));\n\n\treturn unionFastGlobResults(results, filter);\n});\n\nexport const globbySync = normalizeArgumentsSync((patterns, options) => {\n\tconst tasks = generateTasksSync(patterns, options);\n\tconst filter = getFilterSync(options);\n\tconst results = tasks.map(task => fastGlob.sync(task.patterns, task.options));\n\n\treturn unionFastGlobResults(results, filter);\n});\n\nexport const globbyStream = normalizeArgumentsSync((patterns, options) => {\n\tconst tasks = generateTasksSync(patterns, options);\n\tconst filter = getFilterSync(options);\n\tconst streams = tasks.map(task => fastGlob.stream(task.patterns, task.options));\n\n\treturn unionFastGlobStreams(streams, filter);\n});\n\nexport const isDynamicPattern = normalizeArgumentsSync(\n\t(patterns, options) => patterns.some(pattern => fastGlob.isDynamicPattern(pattern, options)),\n);\n\nexport const generateGlobTasks = normalizeArguments(generateTasks);\nexport const generateGlobTasksSync = normalizeArgumentsSync(generateTasksSync);\n\nexport {\n\tisGitIgnored,\n\tisGitIgnoredSync,\n} from './ignore.js';\n"],"mappings":"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","names":["require_path_type","__commonJSMin","exports","promisify","fs","isType","fsStatType","statsMethodName","filePath","error","isTypeSync","require_dir_glob","__commonJSMin","exports","module","path","pathType","getExtensions","extensions","getPath","filepath","cwd","pth","addExtensions","file","getGlob","directory","options","x","input","globs","require_ignore","__commonJSMin","exports","module","makeArray","subject","EMPTY","SPACE","ESCAPE","REGEX_TEST_BLANK_LINE","REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION","REGEX_REPLACE_LEADING_EXCAPED_HASH","REGEX_SPLITALL_CRLF","REGEX_TEST_INVALID_PATH","SLASH","KEY_IGNORE","define","object","key","value","REGEX_REGEXP_RANGE","RETURN_FALSE","sanitizeRange","range","match","from","to","cleanRangeBackSlash","slashes","length","REPLACERS","_","index","str","p1","leadEscape","endEscape","close","regexCache","makeRegex","pattern","ignoreCase","source","prev","current","isString","checkPattern","splitPattern","IgnoreRule","origin","negative","regex","createRule","throwError","message","Ctor","checkPath","path","originalPath","doThrow","isNotRelative","p","Ignore","ignorecase","allowRelativePaths","rule","checkUnignored","ignored","unignored","cache","slices","parent","paths","factory","options","isPathValid","makePosix","REGIX_IS_WINDOWS_PATH_ABSOLUTE","slash","path","isExtendedLengthPath","hasNonAscii","init_slash","__esmMin","fileURLToPath","Transform","toPath","FilterStream","isNegativePattern","init_utilities","__esmMin","urlOrPath","filter","data","encoding","callback","pattern","process","fs","path","import_fast_glob","import_ignore","ignoreFilesGlobOptions","GITIGNORE_FILES_PATTERN","applyBaseToPattern","parseIgnoreFile","toRelativePath","getIsIgnoredPredicate","normalizeOptions","isIgnoredByIgnoreFiles","isIgnoredByIgnoreFilesSync","isGitIgnored","isGitIgnoredSync","init_ignore","__esmMin","init_slash","init_utilities","pattern","base","isNegativePattern","file","cwd","slash","line","fileOrDirectory","files","patterns","ignores","gitIgnore","toPath","options","paths","fastGlob","filePath","fs","nodePath","import_merge2","import_fast_glob","import_dir_glob","assertPatternsInput","toPatternsArray","checkCwdOption","normalizeOptions","normalizeArguments","normalizeArgumentsSync","getIgnoreFilesPatterns","getFilter","getFilterSync","createFilterFunction","unionFastGlobResults","unionFastGlobStreams","convertNegativePatterns","getDirGlobOptions","generateTasks","generateTasksSync","globby","globbySync","globbyStream","isDynamicPattern","generateGlobTasks","generateGlobTasksSync","init_globby","__esmMin","init_ignore","init_utilities","patterns","pattern","options","stat","toPath","fn","ignoreFiles","gitignore","GITIGNORE_FILES_PATTERN","ignoreFilesPatterns","isIgnoredByIgnoreFiles","isIgnoredByIgnoreFilesSync","isIgnored","seen","fastGlobResult","path","pathKey","seenOrIgnored","results","filter","streams","merge2","FilterStream","tasks","index","isNegativePattern","ignorePattern","task","cwd","globTasks","expandDirectories","patternExpandOptions","ignoreExpandOptions","dirGlob","fastGlob"]}